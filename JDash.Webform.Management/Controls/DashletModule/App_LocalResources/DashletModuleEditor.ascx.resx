<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ctlAddCustomCommand.Text" xml:space="preserve">
    <value>Add new command</value>
  </data>
  <data name="ctlAutoEdit.Title" xml:space="preserve">
    <value>Automatically open editor when new a dashlet is added by user</value>
  </data>
  <data name="ctlCancelButton.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ctlClientModulePath.Help" xml:space="preserve">
    <value>File extension defaults to .js and should not be specified in path. See &lt;a href="http://requirejs.org/"&gt; RequireJs&lt;/a&gt; paths for more information.</value>
  </data>
  <data name="ctlClientModulePath.Info" xml:space="preserve">
    <value>Javascript file path of client module i.e. /Dashlets/MyDashlet</value>
  </data>
  <data name="ctlClientModulePath.Title" xml:space="preserve">
    <value>Client Module Path</value>
  </data>
  <data name="ctlConfig.Title" xml:space="preserve">
    <value>Config as JSON</value>
  </data>
  <data name="ctlControlPath.Info" xml:space="preserve">
    <value>Virtual path of user control i.e. ~/Controls/MyDashlet.ascx</value>
  </data>
  <data name="ctlControlPath.Title" xml:space="preserve">
    <value>User Control Path</value>
  </data>
  <data name="ctlCssClass.Info" xml:space="preserve">
    <value>CSS class name applied to dashlet instances</value>
  </data>
  <data name="ctlCssClass.Title" xml:space="preserve">
    <value>CSS Class</value>
  </data>
  <data name="ctlDashboardType.Title" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ctlDashletConfig.Info" xml:space="preserve">
    <value>Configration for dashlet defaults</value>
  </data>
  <data name="ctlDashletConfig.Title" xml:space="preserve">
    <value>Dashlete Config as JSON</value>
  </data>
  <data name="ctlDescrition.Info" xml:space="preserve">
    <value>Dashlet description</value>
  </data>
  <data name="ctlDescrition.Title" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="ctlEditable.Title" xml:space="preserve">
    <value>Dashlet can be configured by end user</value>
  </data>
  <data name="ctlEditorClientModulePath.Help" xml:space="preserve">
    <value>File extension defaults to .js and should not be specified in path. See &lt;a href="http://requirejs.org/"&gt; RequireJs&lt;/a&gt; paths for more information.</value>
  </data>
  <data name="ctlEditorClientModulePath.Info" xml:space="preserve">
    <value>Javascript file path of client module i.e. /Dashlets/MyDashletEditor</value>
  </data>
  <data name="ctlEditorControlPath.Info" xml:space="preserve">
    <value>Virtual path of user control i.e. ~/Controls/MyDashletEditor.ascx</value>
  </data>
  <data name="ctlEditorControlPath.Title" xml:space="preserve">
    <value>User Control Path</value>
  </data>
  <data name="ctlGroup.Info" xml:space="preserve">
    <value>Set name for new group</value>
  </data>
  <data name="ctlGroup.Title" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="ctlHeigth.Info" xml:space="preserve">
    <value>Editor heigth i.e. 400px</value>
  </data>
  <data name="ctlHeigth.Title" xml:space="preserve">
    <value>Heigth</value>
  </data>
  <data name="ctlLayout.Title" xml:space="preserve">
    <value>Layout as JSON</value>
  </data>
  <data name="ctlMaximizeable.Title" xml:space="preserve">
    <value>Dashlet can be maximized over dashboard</value>
  </data>
  <data name="ctlMetadata.Info" xml:space="preserve">
    <value>Metadata settings</value>
  </data>
  <data name="ctlMetadata.Title" xml:space="preserve">
    <value>Metadata as JSON</value>
  </data>
  <data name="ctlModuleConfig.Info" xml:space="preserve">
    <value>Dashlet module configration</value>
  </data>
  <data name="ctlModuleConfig.Title" xml:space="preserve">
    <value>Config as JSON</value>
  </data>
  <data name="ctlPaneConfig.Info" xml:space="preserve">
    <value>Pane settings of dashlet</value>
  </data>
  <data name="ctlPaneConfig.Title" xml:space="preserve">
    <value>Pane Config as JSON</value>
  </data>
  <data name="ctlRefreshable.Title" xml:space="preserve">
    <value>Content of dashlet can be refreshed</value>
  </data>
  <data name="ctlRemoveable.Title" xml:space="preserve">
    <value>Users can remove dashlet</value>
  </data>
  <data name="ctlRemoveButton.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="ctlShowInsideWindow.Title" xml:space="preserve">
    <value>Show editor inside window</value>
  </data>
  <data name="ctlSubmitButton.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ctlTitle.Info" xml:space="preserve">
    <value>Dashlet title</value>
  </data>
  <data name="ctlTitle.Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="ctlUseCustomGroup.Title" xml:space="preserve">
    <value>Create a group</value>
  </data>
  <data name="ctlUseDefaultModule.Title" xml:space="preserve">
    <value>Use default client module</value>
  </data>
  <data name="ctlWidth.Info" xml:space="preserve">
    <value>Editor width i.e. 300px</value>
  </data>
  <data name="ctlWidth.Title" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="customCommands.Text" xml:space="preserve">
    <value>Custom Commands</value>
  </data>
  <data name="modalHeader.Text" xml:space="preserve">
    <value>Dashlet Module Editor</value>
  </data>
  <data name="tabDashletConfig.Text" xml:space="preserve">
    <value>Dashlet Config</value>
  </data>
  <data name="tabGeneral.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="tabMetadata.Text" xml:space="preserve">
    <value>Metadata</value>
  </data>
  <data name="tabModuleConfig.Text" xml:space="preserve">
    <value>Module Config</value>
  </data>
  <data name="tabPaneCommands.Text" xml:space="preserve">
    <value>Pane Commands</value>
  </data>
  <data name="tabPaneConfig.Text" xml:space="preserve">
    <value>Pane Config</value>
  </data>
  <data name="ctlEditButton.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="ctlRemoveButton.ConfirmText" xml:space="preserve">
    <value>Do you want to remove this command?</value>
  </data>
  <data name="ctlNotifyMaximize.Title" xml:space="preserve">
    <value>Notify on maximize</value>
  </data>
  <data name="ctlNotifyOnRefresh.Title" xml:space="preserve">
    <value>Notify on refresh</value>
  </data>
  <data name="ctlNotifyOnRemove.Title" xml:space="preserve">
    <value>Notify on remove</value>
  </data>
  <data name="tabAuthentication.Text" xml:space="preserve">
    <value>Authorization</value>
  </data>
</root>