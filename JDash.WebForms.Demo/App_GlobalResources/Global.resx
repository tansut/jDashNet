<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDashlet" xml:space="preserve">
    <value>+ Add Dashlet</value>
  </data>
  <data name="AllRightsReserved" xml:space="preserve">
    <value>© 2009 - 2013 Kalitte Inc. All rights reserved.</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create New Dashboard</value>
  </data>
  <data name="CssClass" xml:space="preserve">
    <value>Css Class</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Design" xml:space="preserve">
    <value>Design</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Customize</value>
  </data>
  <data name="FirstDimension" xml:space="preserve">
    <value>First Dimension</value>
  </data>
  <data name="FirstMetric" xml:space="preserve">
    <value>First Metric</value>
  </data>
  <data name="FooterLink" xml:space="preserve">
    <value>Visit &lt;a href="http://www.jdash.net" target="_blank"&gt;www.jdash.net&lt;/a&gt; for licensing options.</value>
  </data>
  <data name="LimtDataBy" xml:space="preserve">
    <value>Limit data by:</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="NRows" xml:space="preserve">
    <value>{0} Rows</value>
  </data>
  <data name="PageTitle" xml:space="preserve">
    <value>Online demo - JDash.Net - Asp.Net based dashboard and widget toolkit</value>
  </data>
  <data name="Presets" xml:space="preserve">
    <value>Presets</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>Processing ...</value>
  </data>
  <data name="SecondDimensionOptional" xml:space="preserve">
    <value>Second Dimension (Optional)</value>
  </data>
  <data name="SecondMetricOptional" xml:space="preserve">
    <value>Second Metric (Optional)</value>
  </data>
  <data name="SelectCube" xml:space="preserve">
    <value>Select a data set to analyse</value>
  </data>
  <data name="SelectDimensions" xml:space="preserve">
    <value>Group metrics by following dimensions:</value>
  </data>
  <data name="SelectMetrics" xml:space="preserve">
    <value>Select metrics you want to see:</value>
  </data>
  <data name="SkipTopNRows" xml:space="preserve">
    <value>Skip top N rows</value>
  </data>
  <data name="SortBy" xml:space="preserve">
    <value>Sort data by:</value>
  </data>
  <data name="SortDir" xml:space="preserve">
    <value>Increasing or decreasing?</value>
  </data>
  <data name="SortThenBy" xml:space="preserve">
    <value>Then by:</value>
  </data>
  <data name="Style" xml:space="preserve">
    <value>Style</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="ChartHeight" xml:space="preserve">
    <value>Chart Height (i.e. 300)</value>
  </data>
  <data name="ChartTypeArea" xml:space="preserve">
    <value>Area Chart</value>
  </data>
  <data name="ChartTypeBar" xml:space="preserve">
    <value>Bar Chart</value>
  </data>
  <data name="ChartTypeColumn" xml:space="preserve">
    <value>Column Chart</value>
  </data>
  <data name="ChartTypeLine" xml:space="preserve">
    <value>Line Chart</value>
  </data>
  <data name="ChartTypePie" xml:space="preserve">
    <value>Pie Chart</value>
  </data>
  <data name="FooterText" xml:space="preserve">
    <value>FooterText</value>
  </data>
  <data name="HeaderText" xml:space="preserve">
    <value>Header Text</value>
  </data>
  <data name="PivotData" xml:space="preserve">
    <value>Pivot Data</value>
  </data>
  <data name="SelectChartType" xml:space="preserve">
    <value>Select chart type</value>
  </data>
  <data name="SelectMetric" xml:space="preserve">
    <value>Select a metric</value>
  </data>
  <data name="ChartTheme" xml:space="preserve">
    <value>Chart Theme</value>
  </data>
  <data name="ChartThemeBlue" xml:space="preserve">
    <value>Blue</value>
  </data>
  <data name="ChartThemeDefault" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="ChartThemeGray" xml:space="preserve">
    <value>Gray</value>
  </data>
  <data name="ChartThemeGreen" xml:space="preserve">
    <value>Green</value>
  </data>
  <data name="Area" xml:space="preserve">
    <value>Area</value>
  </data>
  <data name="Bar" xml:space="preserve">
    <value>Bar</value>
  </data>
  <data name="ChartDataDashletStep1" xml:space="preserve">
    <value>1st Step: Data Source and Chart Type</value>
  </data>
  <data name="ChartDataDashletStep1Desc" xml:space="preserve">
    <value>Data source provides measures, dimensions and data values that are required for analysis.</value>
  </data>
  <data name="ChartDataDashletStep2" xml:space="preserve">
    <value>2nd Step: Measures</value>
  </data>
  <data name="ChartDataDashletStep2Desc" xml:space="preserve">
    <value>Metric is a numerical value propery that allows analytical calculations.</value>
  </data>
  <data name="ChartDataDashletStep3" xml:space="preserve">
    <value>3th Step: Dimensions and Sorting</value>
  </data>
  <data name="ChartDataDashletStep3Desc" xml:space="preserve">
    <value>Dimension groups metric value calculations.&lt;br&gt;
Pivot data dimension creates series in your chart view.</value>
  </data>
  <data name="ChartDataDashletStep4" xml:space="preserve">
    <value>4th Step: Chart Display</value>
  </data>
  <data name="ChartDataDashletStep4Desc" xml:space="preserve">
    <value>Change look and feel of chart. Use chart types for different visual perspectives.</value>
  </data>
  <data name="ChartDataDashletStep5" xml:space="preserve">
    <value>5th Step: Chart Labels</value>
  </data>
  <data name="ChartDataDashletStep5Desc" xml:space="preserve">
    <value>Add custom labels over chart to provide additional information.</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="NextStep" xml:space="preserve">
    <value>Next Step</value>
  </data>
  <data name="Pie" xml:space="preserve">
    <value>Pie</value>
  </data>
  <data name="PreviousStep" xml:space="preserve">
    <value>Previous Step</value>
  </data>
  <data name="TableDataDashletStep1" xml:space="preserve">
    <value>1st Step: Data Source</value>
  </data>
  <data name="TableDataDashletStep1Desc" xml:space="preserve">
    <value>Data source provides measures, dimensions and data values that are required for analysis.</value>
  </data>
  <data name="TableDataDashletStep2" xml:space="preserve">
    <value>2nd Step: Measures</value>
  </data>
  <data name="TableDataDashletStep2Desc" xml:space="preserve">
    <value>Metric is a numerical value propery that allows analytical calculations. </value>
  </data>
  <data name="TableDataDashletStep3" xml:space="preserve">
    <value>3th Step: Dimensions</value>
  </data>
  <data name="TableDataDashletStep3Desc" xml:space="preserve">
    <value>Dimension groups metric value calculations.</value>
  </data>
  <data name="TableDataDashletStep4" xml:space="preserve">
    <value>4th Step: Order and Limit</value>
  </data>
  <data name="TableDataDashletStep4Desc" xml:space="preserve">
    <value>Re order and limit data for a better result display.</value>
  </data>
  <data name="ChartThemeBlue1" xml:space="preserve">
    <value>Blue</value>
  </data>
  <data name="ChartThemeDefault1" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="ChartThemeGray1" xml:space="preserve">
    <value>Gray</value>
  </data>
  <data name="ChartThemeGreen1" xml:space="preserve">
    <value>Green</value>
  </data>
</root>